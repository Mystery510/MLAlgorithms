# -*- coding: utf-8 -*-
"""Iris_LogisticRegression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZNveuB3A0Ek3Akjbo5vvyHiUw_c09xDf
"""

import pandas as pd
# used to read the data set
import numpy as np
# used to do some operations with the arrays
import os
# used handle some files
import matplotlib.pyplot as plt
# used to visualize the data using graphs
import seaborn as sns
# plotting the chart in a single line

df=pd.read_csv("/home/Iris.csv")

from google.colab import drive
drive.mount('/content/drive')

df.info()

df = df.drop(columns = ['Id'])
df

df.isnull().sum()

df['SepalLengthCm'].hist()
df['SepalWidthCm'].hist()

df['PetalLengthCm'].hist()
df['PetalWidthCm'].hist()

df.corr()

from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
df['Species'] = le.fit_transform(df['Species'])
df.head(100)

"""
Steps To Be followed When Applying an Algorithm

    Split the dataset into training and testing dataset. The testing dataset is generally smaller than training one as it will help in training the model better.
    Select any algorithm based on the problem (classification or regression) whatever you feel may be good.
    Then pass the training dataset to the algorithm to train it. We use the .fit() method
    Then pass the testing data to the trained algorithm to predict the outcome. We use the .predict() method.
    We then check the accuracy by passing the predicted outcome and the actual output to the model.

"""

# importing alll the necessary packages to Logistic Regression 
from sklearn.linear_model import LogisticRegression  # for Logistic Regression algorithm
from sklearn.model_selection import train_test_split #to split the dataset for training and testing
from sklearn import metrics #for checking the model accuracy

df

X=df.iloc[:,0:4]
Y=df["Species"]
X.head()

X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.30,random_state=0)
print("Train Shape",X_train.shape)
print("Test Shape",X_test.shape)

log = LogisticRegression()
log.fit(X_train,Y_train)
prediction=log.predict(X_test)
print('The accuracy of the Logistic Regression is',metrics.accuracy_score(prediction,Y_test))

